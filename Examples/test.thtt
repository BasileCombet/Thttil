# MIT License

# Copyright (c) 2019 Basile Combet

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

using <test.thtt> as <test>
using <Lol.thtt>  as <Lol>

@default

%Extern variable test:   %   $(OUT   $extern_var)
%\nOUT     command test:   % $(OUT   "sample")
%\nCALL    command test:   % $(CALL  "inspect")
%\nPRINT   command test:   % $(PRINT "sample")
%\nUPPER   command test:   % $(OUT $(UPPER "sample"))
%\nLOWER   command test:   % $(OUT $(LOWER "SAMPLE"))
%\nTITLE   command test:   % $(OUT $(TITLE "sample sample SAMPLE"))
%\nSHELL   command test:   % $(OUT $(SHELL "cd"))
%\nIFEQ    command test:   % $(IFEQ  "equal", "equal"){ $(OUT "I should be printed!"   ) } $(IFEQ  "equal", "not equal"){ $(OUT "I shouldn't be printed!") }
%\nIFNEQ   command test:   % $(IFNEQ "equal", "equal"){ $(OUT "I shouldn't be printed!") } $(IFNEQ "equal", "not equal"){ $(OUT "I should be printed!"   ) }
%\nCREATE  command test:   % $(CREATE "MyVariableName", "Content of MyVariableName") $(OUT $MyVariableName)
%\nSET     command test:   % $(SET    $MyVariableName , "New content of MyVariableName") $(OUT $MyVariableName)
%\nREPLACE command test:   % $(OUT $(REPLACE $MyVariableName, "New", "Replaced"))
%\nJOIN    command test:   % $(OUT $(JOIN $(SPLIT $MyVariableName, " "), "_"))
%\nFOREACH command test: \n% $(FOREACH "iterator", $(SPLIT $MyVariableName, " "))
{
    %   [% $(OUT $iterator.index.value) %/% $(OUT $iterator.index.max) %] % $(OUT $iterator.value) %\n%
}

@test

%This should now be writing in the named 'test' stream%

# Writes the current content of @test into @default 
@test -> @default