/**
 * This file contains a list of all the symbols required to make a THTTIL program
 * 
 * PROGRAM    = TOKEN*
 * TOKEN      = '$(' COMMAND ARUMENT+ ')' (| '{' TOKEN* '}')
 * ARGUMENT   = (VARIABLE | TOKEN | STRING)
 * COMMAND    = IDENTIFIER
 * VARIABLE   = '$' IDENTIFIER
 * STRING     = '"' [^"]* '"'
 */

/**
 * A symbol is an object generated by the lexer/parser allowing to define a THTTIL
 * program. This symbol can be a variable, a string, a command, a tokens, etc...
 * 
 * A symbol can be constant, meaning that it cannot be modified during the execution
 * of the program.
 */
class ThttilSymbol
{
    public var const: Bool;

    public function new(const: Bool = false)
    {
        this.const = const;
    }
}

class ThttilProgram extends ThttilSymbol
{
    public var tokens: Array<ThttilToken>;

    public function new(const: Bool = false)
    {
        this.tokens = [];
        super(const);
    }
}

/**
 * Base command class.
 * 
 * A constant command means that no matter how many times this command is called
 * with the same aguments, the result should be the same.
 * This allows for pre evaluation when parsing the program. 
 * 
 * For example, $(UPPER "Content") since "Content" and UPPER are constant symbols, 
 * the token will be replaced with $(UPPER "Content")->"CONTENT" on the optimization pass
 */
class ThttilCommand extends ThttilSymbol
{
    public var requires_instruction_block: Bool;

    public function new(requires_instruction_block: Bool = false, const: Bool = false)
    {
        this.requires_instruction_block = requires_instruction_block;
        super(const);
    }

    public function execute(): Dynamic
    {
        // TODO
        return null;
    }
}

/**
 * Main interface to declare a token argument.
 */
interface ThttilArgument
{
    public function getValue(): Dynamic;
}

class ThttilToken extends ThttilSymbol implements ThttilArgument
{
    public var command          : ThttilCommand;
    public var arguments        : Array<ThttilArgument>;
    public var instruction_block: Array<ThttilToken>;

    public function new(command: ThttilCommand, arguments: Array<ThttilArgument>,
                        instruction_block: Array<ThttilToken>, const: Bool = false)
    {
        this.command            = command;
        this.arguments          = arguments;
        this.instruction_block  = instruction_block;

        super(const);
    }

    public function getValue(): Dynamic
    {
        if (command != null)
            return command.execute();

        return null;
    }
}

class ThttilStream extends ThttilSymbol implements ThttilArgument
{
    private var name   : String;
    public  var content: String;

    public function new(name: String)
    {
        // A stream cannot be contant
        super(false);

        this.name    = name;
        this.content = "";
    }

    public function getValue(): String
    {
        return content;
    }
}

class ThttilVariable extends ThttilSymbol implements ThttilArgument
{
    private var name : String;
    public  var value: Dynamic;

    public function new(name: String, value: Dynamic, const: Bool = false)
    {
        super(const);

        this.name  = name;
        this.value = value;
    }

    public function getValue(): Dynamic
    {
        return value;
    }
}

class ThttilString extends ThttilSymbol implements ThttilArgument
{
    public var content: Dynamic;

    public function new(content: String)
    {
        super(true);

        this.content = content;
    }

    public function getValue(): Dynamic
    {
        return content;
    }
}